[project]
name = "paper"
version = "17.0.0"
description = "Add your description here"
readme = "README.md"
license = {text = "AGPL-3.0-or-later"}
requires-python = ">=3.12"
dependencies = [
    "aiohttp>=3.10.5",
    "pydantic>=2.11.4",
    "matplotlib>=3.9.2",
    "networkx>=3.3",
    "openai>=1.72.0",
    "python-dotenv>=1.0.1",
    "tqdm>=4.66.5",
    "thefuzz>=0.22.1",
    "typer>=0.12.5",
    "rich>=13.9.2",
    "backoff>=2.2.1",
    "tiktoken>=0.8.0",
    "aiolimiter>=1.1.0",
    "sentence-transformers>=3.3.0",
    "polars>=1.16.0",
    "openreview-py>=1.46.3",
    "arxiv>=2.1.3",
    "nltk>=3.9.1",
    "numpy>=2.1.3",
    "scipy-stubs>=1.15.2.1",
    "toml>=0.10.2",
    "google-genai>=1.10.0",
    "typing-extensions>=4.12.2",
    "beartype>=0.20.2",
    "orjson>=3.10.18",
    "zstandard>=0.23.0",
    "semanticscholar>=0.10.0",
    "fastapi[standard]>=0.115.13",
    "psycopg[binary,pool]>=3.2.9",
    "psutil>=6.1.0",
]

[dependency-groups]
dev = [
    "codespell>=2.4.1",
    "cosy",
    "icecream>=2.1.3",
    "ipython>=8.27.0",
    "jupyterlab>=4.2.5",
    "pdoc>=15.0.1",
    "pre-commit>=3.8.0",
    "pyright>=1.1.401",
    "pytest>=8.3.4",
    "pytest-asyncio>=1.0.0",
    "pytest-cov>=6.1.1",
    "ruff>=0.11.13",
]

[tool.uv.sources.cosy]
git = "https://github.com/oyarsa/x.git"
subdirectory = "cosy"
tag = "cosy-0.4.0"

[project.scripts]
paper = "paper.cli:app"

[tool.ruff.format]
preview = true

[tool.ruff.lint.isort]
known-first-party = ["paper"]

[tool.ruff.lint]
exclude = ["notebooks/*", "frontend/*"]
select = ["ALL"]
# I try to enable as many reasonable rules as possible, but sometimes it's too much:
ignore = [
    "FIX",      # Allow FIX/TODO/XXX comments.
    "TD",       # Allow TODO comments without author/link
    "COM",      # Let ruff take care of trailing commas
    "T",        # Allow print
    "FLY",      # Allow static string joins
    "FBT",      # Allow positional boolean arguments
    "EM",       # Exception messages with literals/f-strings
    "A",        # Allow shadowing built-ins
    "ARG",      # Allow unused arguments
    "BLE",      # Allow blind excepts
    #
    "ANN401",   # Allow usage of Any
    "B905",     # `zip` without `strict`
    "C901",     # "too complex" functions
    "D107",     # Allow no docstring in __init__
    "D202",     # Empty lines between function docstring and body
    "E501",     # Line too long (let ruff format take care of this)
    "G004",     # f-strings in logging
    "ISC001",   # Incompatible with the formatter
    "PERF401",  # Manual list comprehensions
    "PGH003",   # Allow blanket type: ignore statements
    "PLC0206",  # Dictionary iteration without items
    "PLC0414",  # Allow redundant alias to re-export items
    "PLR0911",  # Too many return statements
    "PLR0912",  # Too many branches
    "PLR0913",  # Too many arguments
    "PLR0915",  # Too many statements
    "PLR2004",  # Magic value used in comparison
    "PTH123",   # Allow `open(p)` instead of `Path(p).open`
    "RET505",   # Allow `else` after `return`. I like this symmetry in some cases.
    "S101",     # Allow assert
    "S110",     # try/except/pass
    "S113",     # Request without timeout
    "S311",     # Allow regular `random.Random` (not crypto safe, but that's fine)
    "S603",     # Allow subprocess with 'untrusted' input
    "S607",     # Allow subprocess with relative path (usually `uv run`)
    "SIM108",   # Use ternary operation instead of if-else block
    "TC003",    # Allow stdlib imports outside of TYPE_CHECKING. This triggers some
                # false-positives because of how typer/pydantic interact with type hints,
                # especially with Path.
    "TC006",    # I don't want to quote `cast` arguments.
    "TRY003",   # Long messages outside exception class
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.pyright]
# Ruff also handles this, and it needs to be enabled there for fixAll to fix it,
# so we disable it here to avoid duplicate errors
reportUnusedImport = false
typeCheckingMode = "strict"

# Allow unit tests to import private things
executionEnvironments = [
  { root = "tests", reportPrivateUsage = false }
]

exclude = [
    "**/__pycache__",
    "**/.*",
    "notebooks/",
    "frontend/",
    "tmp/"
]

[tool.codespell]
skip = "*.json,*.ipynb,.venv,output,*tmp,data,docs,frontend"

[tool.pytest.ini_options]
asyncio_default_fixture_loop_scope = "class"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.sdist]
exclude = [
    "frontend/",
    ".jj",
    "notebooks/",
    "assets/",
    ".github",
    ".claude",
    "experiments"
]

[tool.uv]
conflicts = [
  [
    { extra = "cpu" },
    { extra = "cuda" },
  ],
]

[tool.uv.sources]
torch = [
  { index = "pytorch-cpu", extra = "cpu" },
  { index = "pytorch-cu128", extra = "cuda" },
]

[[tool.uv.index]]
name = "pytorch-cpu"
url = "https://download.pytorch.org/whl/cpu"
explicit = true

[[tool.uv.index]]
name = "pytorch-cu128"
url = "https://download.pytorch.org/whl/cu128"
explicit = true

[project.optional-dependencies]
cpu = ["torch>=2.5.1"]
cuda = ["torch>=2.5.1"]
sft = [
    "faiss-cpu>=1.10.0",
    "transformers>=4.46.2",
    "datasets>=3.5.0",
    "peft>=0.15.1",
    "bitsandbytes>=0.45.3 ; sys_platform == 'linux' and platform_machine == 'x86_64'",
]
