[project]
name = "paper"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
license = {text = "GPL-3.0-or-later"}
requires-python = ">=3.12"
dependencies = [
    "aiohttp>=3.10.5",
    "pydantic>=2.9.2",
    "matplotlib>=3.9.2",
    "networkx>=3.3",
    "openai>=1.45.0",
    "python-dotenv>=1.0.1",
    "tqdm>=4.66.5",
    "thefuzz>=0.22.1",
    "typer>=0.12.5",
    "rich>=13.9.2",
    "backoff>=2.2.1",
    "tiktoken>=0.8.0",
    "aiolimiter>=1.1.0",
    "sentence-transformers>=3.3.0",
    "polars>=1.16.0",
    "openreview-py>=1.46.3",
    "arxiv>=2.1.3",
    "nltk>=3.9.1",
]

[dependency-groups]
dev = [
    "codespell>=2.4.1",
    "cosy",
    "icecream>=2.1.3",
    "ipython>=8.27.0",
    "jupyterlab>=4.2.5",
    "pre-commit>=3.8.0",
    "pyright>=1.1.393",
    "pytest>=8.3.4",
    "ruff>=0.9.4",
]

[tool.uv.sources.cosy]
git = "https://github.com/oyarsa/x.git"
subdirectory = "cosy"
tag = "cosy-0.4.0"

[project.scripts]
peerread = "paper.peerread.cli:app"
gpt = "paper.gpt.cli:app"
scimon = "paper.scimon.cli:app"
peter = "paper.peter.cli:app"
openreview = "paper.openreview_client:app"

[tool.ruff.format]
preview = true

[tool.ruff.lint.isort]
known-first-party = ["paper"]

[tool.ruff.lint]
exclude = ["notebooks/*"]
select = [
    "E",        # Code style
    "W",        # Code style
    "F",        # Pyflakes
    "I",        # Imports
    "ISC",      # Implicit string concat
    "N",        # PEP-8 naming
    "PL",       # Pylint
    "RUF",      # Ruff-specific
    "SIM",      # Simplify
    "TRY",      # Exceptions
    "UP",       # Upgrade to new constructs
    "ERA",      # Commented-out code
    "D",        # Documentation
    "FURB",     # Modernisation
    "PTH",      # Pathlib usage
    "RET",      # Unnecessary elses
    "G",        # Logging format
    "DTZ",      # Timezones
    "B",        # Likely bugs
    "C",        # Comprehensions
    "ASYNC",    # Async pitfalls
    "EXE",      # Executable (shebang)S
    "ANN",      # Type annotations
    "PYI",      # Appropriate type hints for specific cases
    "PERF",     # Performance anti-patterns
]
# I try to enable as many reasonable rules as possible, but sometimes it's too much:
ignore = [
    "ANN401",   # Allow usage of Any
    "ASYNC110", # 'asyncio.sleep' in loop
    "B905",     # `zip` without `strict`
    "C901",     # "too complex" functions
    "D107",
    "D202",     # Empty lines between function docstring and body
    "E501",     # Line too long (let ruff format take care of this)
    "G004",     # f-strings in logging
    "ISC001",   # Incompatible with the formatter
    "N999",     # False positive on `paper-hypergraph` (the module is named `paper`)
    "PERF401",  # Manual list comprehensions
    "PLC0206",  # Dictionary iteration without items
    "PLC0414",  # Allow redundant alias to re-export items
    "PLR0911",  # Too many return statements
    "PLR0912",  # Too many branches
    "PLR0913",  # Too many arguments
    "PLR0915",  # Too many statements
    "PLR2004",  # Magic value used in comparison
    "PTH123",   # Allow `open(p)` instead of `Path(p).open`
    "SIM108",   # Use ternary operation instead of if-else block
    "TRY003",   # Long messages outside exception class
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.pyright]
# Ruff also handles this, and it needs to be enabled there for fixAll to fix it,
# so we disable it here to avoid duplicate errors
reportUnusedImport = false
typeCheckingMode = "strict"

# Allow unit tests to import private things
executionEnvironments = [
  { root = "tests", reportPrivateUsage = false }
]

[tool.codespell]
skip = "*.json,*.ipynb,.venv,output,*tmp,data"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"
