root := `git rev-parse --show-toplevel`
eval_cmd := "uv run gpt eval"

# Configuration selector
demos := env("DEMOS", "eval_4")
model := env("MODEL", "4o-mini")
data := env("DATA", "subset")
num_items := env("N", "0")

# Number of items
n := if data == "full" { "125" } else { num_items }

# Sans data paths
data_sans := if data == "full" {
    root + "/output/output_new/subset/peerread_with_s2_references.json"
} else {
    root + "/output/subset/peerread_with_s2_references.json"
}

# Full data paths
data_full := if data == "full" {
    root + "/output/output_new/peter_summarised/result.json"
} else {
    root + "/output/peter_c2_s2_sum/result.json"
}

eval_flags := "--demos " + demos + " -n " + n + " -m " + model +  " --papers " + data_full
output := root+"/output/eval/graph/"+data+"/"+model+"/"+demos

ablation_output := root+"/output/graph-ablation/"+data+"/"+model+"/"+demos

_default:
    @echo "Environment variables:"
    @echo "    MODEL: '4o' or '4o-mini' (default)"
    @echo "    DATA: 'full' or 'subset' (default)"
    @echo "    DEMOS: see 'gpt demos'. Default: eval_4."
    @echo
    @just --list --unsorted

_t msg:
    @echo '{{ style("warning") }}>>> {{msg}}{{ NORMAL }}'

# Graph evaluation
_graph prompt:
    {{eval_cmd}} graph run {{eval_flags}} --output {{output}}/graph/{{prompt}} --eval-prompt {{prompt}}

# Graph-eval with abstract-only prompt
[group: 'graph']
graph-sans: (_t "Running graph evaluation - sans mode")
    @just _graph sans

# Graph-eval with PETER prompt
[group: 'graph']
graph-related: (_t "Running graph evaluation - PETER (related) mode")
    @just _graph related

# Graph-eval with full graph prompt
[group: 'graph']
graph-all: (_t "Running graph evaluation - main graph mode")
    @just _graph full-graph

# Graph-eval with title and graph prompt
[group: 'graph']
graph-title: (_t "Running graph evaluation - title-only graph")
    @just _graph title-graph

# Graph-eval with only graphs prompt
[group: 'graph']
graph-only: (_t "Running graph evaluation - graphs only")
    @just _graph only-graph

# Run all graph versions
[group: 'graph']
all-graphs: (_t "Run all main graph versions and show metrics")
    @just graph-only
    @just graph-title
    @just graph-all
    @just metrics

# Graph evaluation with fluent linearisation
_graph-fluent prompt:
    {{eval_cmd}} graph run {{eval_flags}} --linearisation fluent --output {{output}}/graph/{{prompt}} --eval-prompt {{prompt}}

# Graph-eval with full graph prompt
[group: 'graph-fluent']
graph-fluent-all: (_t "Running graph evaluation - main graph mode")
    @just _graph-fluent full-graph

# Graph-eval with title and graph prompt
[group: 'graph-fluent']
graph-fluent-title: (_t "Running graph evaluation - title-only graph")
    @just _graph-fluent title-graph

# Graph-eval with only graphs prompt
[group: 'graph-fluent']
graph-fluent-only: (_t "Running graph evaluation - graphs only")
    @just _graph-fluent only-graph

# Run all fluent graph versions
[group: 'graph-fluent']
all-fluent-graphs: (_t "Run all fluent main graph versions and show metrics")
    @just graph-fluent-only
    @just graph-fluent-title
    @just graph-fluent-all
    @just metrics

# PETER evaluation
_peter prompt:
    {{eval_cmd}} peter run {{eval_flags}} --output {{output}}/peter/{{prompt}} --user-prompt {{prompt}}

# PETER-eval with abstract-only prompt
[group: 'peter']
peter-sans: (_t "Running PETER evaluation - sans mode")
    @just _peter sans

# PETER-eval with full PETER prompt
[group: 'peter']
peter-related: (_t "Running graph evaluation - PETER (related) mode")
    @just _peter simple

# Full evaluation
[group: 'sans']
sans: (_t "Running sans evaluation")
    {{eval_cmd}} sans run {{eval_flags}} --output {{output}}/sans --user-prompt simple-abs

# Compare all implementations of sans evaluation
cmp-sans: (_t "Comparing sans evaluation")
    @just sans
    @just peter-sans
    @just graph-sans

# Compare all implementations of PETER (related) evaluation
cmp-related: (_t "Comparing PETER (related) evaluation")
    @just peter-related
    @just graph-related

# Run all unique experiments (sans/PETER/graph)
all: (_t "Comparing sans/PETER/graph variants")
    @just sans
    @just peter-related
    @just graph-all

# Show metrics for all available runs
metrics:
    #!/usr/bin/env fish
    echo "Metrics for model: {{model}}, data: {{data}}, demos: {{demos}}"
    {{root}}/scripts/experiments/show_eval_results.fish {{output}}/**/metrics.json

# Graph evaluation - graph component ablation
_graph-ablation eval-prompt graph-prompt:
    {{eval_cmd}} graph run {{eval_flags}} \
        --output {{ablation_output}}/{{graph-prompt}}-{{eval-prompt}} \
        --eval-prompt {{eval-prompt}} \
        --graph-prompt {{graph-prompt}}

# Graph-eval with full graph prompt
[group: 'graph-ablation']
graph-ablation-full: (_t "Running graph ablation - full graph with all components")
    @just _graph-ablation full-graph full

# Graph-eval with without experiments
[group: 'graph-ablation']
graph-ablation-noexp: (_t "Running graph ablation - full graph without experiments")
    @just _graph-ablation full-graph noexperiments

# Graph-eval with without methods
[group: 'graph-ablation']
graph-ablation-nomethod: (_t "Running graph ablation - full graph without methods")
    @just _graph-ablation full-graph nomethod

# Graph-eval with without detail
[group: 'graph-ablation']
graph-ablation-nodetail: (_t "Running graph ablation - full graph without detail")
    @just _graph-ablation full-graph nodetail

# All graph abalation versions
[group: 'graph-ablation']
graph-ablation-all: (_t "Running graph ablation - all variants")
    @just graph-ablation-full
    @just graph-ablation-nomethod
    @just graph-ablation-noexp
    @just graph-ablation-nodetail
    @just ablation-metrics

# Show metrics for all available runs
ablation-metrics:
    #!/usr/bin/env fish
    echo "Ablation metrics for model: {{model}}, data: {{data}}, demos: {{demos}}"
    {{root}}/scripts/experiments/show_eval_results.fish {{ablation_output}}/**/metrics.json

# Flags for cited-only and semantic-only PETER
data_cited := root + "/output/peter_c2_s0_sum/result.json"
cited_flags := "--demos " + demos + " -n " + n + " -m " + model +  " --papers " + data_cited

data_semantic := root + "/output/peter_c0_s2_sum/result.json"
semantic_flags := "--demos " + demos + " -n " + n + " -m " + model +  " --papers " + data_semantic

peter_ablation_output := root+"/output/peter-ablation/"+data+"/"+model+"/"+demos

# Cited-only PETER
_peter-cited-ablation eval-prompt graph-prompt:
    {{eval_cmd}} graph run {{cited_flags}} \
        --output {{peter_ablation_output}}/cited-{{graph-prompt}}-{{eval-prompt}} \
        --eval-prompt {{eval-prompt}} \
        --graph-prompt {{graph-prompt}}

# Cited-only PETER
_peter-semantic-ablation eval-prompt graph-prompt:
    {{eval_cmd}} graph run {{semantic_flags}} \
        --output {{peter_ablation_output}}/semantic-{{graph-prompt}}-{{eval-prompt}} \
        --eval-prompt {{eval-prompt}} \
        --graph-prompt {{graph-prompt}}

# Full graph with cited-only PETER
[group: 'peter-ablation']
peter-cited-full: (_t "Full graph with cited-only PETER")
    @just _peter-cited-ablation full-graph full

# Full graph with semantic-only PETER
[group: 'peter-ablation']
peter-semantic-full: (_t "Full graph with semantic-only PETER")
    @just _peter-semantic-ablation full-graph full

# Run both semantic and cited PETER ablations
[group: 'peter-ablation']
peter-ablation-all: (_t "Running PETER ablation - cited and semantic-only")
    @just peter-cited-full
    @just peter-semantic-full
    @just peter-ablation-metrics

# Show metrics for PETER ablations
peter-ablation-metrics:
    #!/usr/bin/env fish
    echo "PETER ablation metrics for model: {{model}}, data: {{data}}, demos: {{demos}}"
    {{root}}/scripts/experiments/show_eval_results.fish {{peter_ablation_output}}/**/metrics.json

rationale_data := root+"/output/eval/4o/graph/full-graph/result.json"
rationale_flags := " -n " + n + " -m " + model +  " --graphs " + rationale_data

# Run rationale evaluation on GPT 4o output
rationale:
    {{eval_cmd}} rationale run {{rationale_flags}} --output output/eval-rationale/{{model}}
